{"version":3,"file":"plugin.cjs.js","sources":["esm/public-key-pinning.js","esm/index.js","esm/web.js"],"sourcesContent":["import { Capacitor } from '@capacitor/core';\r\n// let listenerHandle: PluginListenerHandle;\r\nexport function setPublicKeyPinning(certificates) {\r\n    return new Promise((resolve, reject) => {\r\n        if (Capacitor.addListener) {\r\n            Capacitor.addListener('com.mmtpkp.plugin', 'onPinnedCertificateSet', () => {\r\n                resolve();\r\n            });\r\n        }\r\n        Capacitor.Plugins.Certificate.setPinnedCertificates(certificates)\r\n            .then(() => {\r\n            // Do nothing - the success event will be handled by the listener\r\n        })\r\n            .catch(() => {\r\n            reject(new Error('Failed to set pinned certificates'));\r\n        });\r\n    });\r\n}\r\nexport function clearPublicKeyPinning() {\r\n    return new Promise((resolve, reject) => {\r\n        if (Capacitor.addListener) {\r\n            Capacitor.addListener('com.mmtpkp.plugin', 'onPinnedCertificateCleared', () => {\r\n                resolve();\r\n            });\r\n        }\r\n        Capacitor.Plugins.Certificate.clearPinnedCertificates()\r\n            .then(() => {\r\n            // Do nothing - the success event will be handled by the listener\r\n        })\r\n            .catch(() => {\r\n            reject(new Error('Failed to clear pinned certificates'));\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=public-key-pinning.js.map","import { registerPlugin } from '@capacitor/core';\r\nconst PublicKeyPinning = registerPlugin('PublicKeyPinning', {\r\n    web: () => import('./web').then(m => new m.PublicKeyPinningWeb()),\r\n});\r\nexport * from './definitions';\r\nexport { PublicKeyPinning };\r\nexport { setPublicKeyPinning, clearPublicKeyPinning } from './public-key-pinning';\r\n//# sourceMappingURL=index.js.map","import { WebPlugin } from '@capacitor/core';\r\nexport class PublicKeyPinningWeb extends WebPlugin {\r\n    async echo(options) {\r\n        console.log('ECHO', options);\r\n        return options;\r\n    }\r\n}\r\n//# sourceMappingURL=web.js.map"],"names":["Capacitor","registerPlugin","WebPlugin"],"mappings":";;;;;;AACA;AACO,SAAS,mBAAmB,CAAC,YAAY,EAAE;AAClD,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;AAC5C,QAAQ,IAAIA,cAAS,CAAC,WAAW,EAAE;AACnC,YAAYA,cAAS,CAAC,WAAW,CAAC,mBAAmB,EAAE,wBAAwB,EAAE,MAAM;AACvF,gBAAgB,OAAO,EAAE,CAAC;AAC1B,aAAa,CAAC,CAAC;AACf,SAAS;AACT,QAAQA,cAAS,CAAC,OAAO,CAAC,WAAW,CAAC,qBAAqB,CAAC,YAAY,CAAC;AACzE,aAAa,IAAI,CAAC,MAAM;AACxB;AACA,SAAS,CAAC;AACV,aAAa,KAAK,CAAC,MAAM;AACzB,YAAY,MAAM,CAAC,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC,CAAC;AACnE,SAAS,CAAC,CAAC;AACX,KAAK,CAAC,CAAC;AACP,CAAC;AACM,SAAS,qBAAqB,GAAG;AACxC,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;AAC5C,QAAQ,IAAIA,cAAS,CAAC,WAAW,EAAE;AACnC,YAAYA,cAAS,CAAC,WAAW,CAAC,mBAAmB,EAAE,4BAA4B,EAAE,MAAM;AAC3F,gBAAgB,OAAO,EAAE,CAAC;AAC1B,aAAa,CAAC,CAAC;AACf,SAAS;AACT,QAAQA,cAAS,CAAC,OAAO,CAAC,WAAW,CAAC,uBAAuB,EAAE;AAC/D,aAAa,IAAI,CAAC,MAAM;AACxB;AACA,SAAS,CAAC;AACV,aAAa,KAAK,CAAC,MAAM;AACzB,YAAY,MAAM,CAAC,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC;AACrE,SAAS,CAAC,CAAC;AACX,KAAK,CAAC,CAAC;AACP;;AChCK,MAAC,gBAAgB,GAAGC,mBAAc,CAAC,kBAAkB,EAAE;AAC5D,IAAI,GAAG,EAAE,MAAM,mDAAe,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,mBAAmB,EAAE,CAAC;AACrE,CAAC;;ACFM,MAAM,mBAAmB,SAASC,cAAS,CAAC;AACnD,IAAI,MAAM,IAAI,CAAC,OAAO,EAAE;AACxB,QAAQ,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACrC,QAAQ,OAAO,OAAO,CAAC;AACvB,KAAK;AACL;;;;;;;;;;;"}